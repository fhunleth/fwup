# NOR Device
# +----------------------------+
# | uboot a                    |
# +----------------------------+
# | uboot b                    |
# +----------------------------+
# | uboot env                  |
# +----------------------------+
# | kernel a                   |
# +----------------------------+
# | dtb a                      |
# +----------------------------+
# | kernel b                   |
# +----------------------------+
# | dtb b                      |
# +----------------------------+
#
# NAND Device
# +----------------------------+
# | rootfs a (squashfs)        |
# +----------------------------+
# | rootfs b  (squashfs)       |
# +----------------------------+
# | data                       |
# +----------------------------+

# (Sizes are in 512 byte blocks)
define(UBOOT_A_PART_OFFSET, 0)
define(UBOOT_A_PART_COUNT, 1000)
define-eval(UBOOT_B_PART_OFFSET, "${UBOOT_A_PART_OFFSET} + ${UBOOT_A_PART_OFFSET}")
define(UBOOT_B_PART_COUNT, 1000)
define-eval(UBOOT_ENV_PART_OFFSET, "${UBOOT_B_PART_OFFSET} + ${UBOOT_B_PART_OFFSET}")
define(UBOOT_ENV_PART_COUNT, 512)
define-eval(KERNEL_A_PART_OFFSET, "${UBOOT_ENV_PART_OFFSET} + ${UBOOT_ENV_PART_COUNT}")
define(KERNEL_A_PART_COUNT, 9000)
define-eval(DTB_A_PART_OFFSET, "${KERNEL_A_PART_OFFSET} + ${KERNEL_A_PART_COUNT}")
define(DTB_A_PART_COUNT, 256)
define-eval(KERNEL_B_PART_OFFSET, "${DTB_A_PART_OFFSET} + ${DTB_A_PART_COUNT}")
define(KERNEL_B_PART_COUNT, 9000)
define-eval(DTB_A_PART_OFFSET, "${KERNEL_B_PART_OFFSET} + ${KERNEL_B_PART_COUNT}")
define(DTB_B_PART_COUNT, 256)

define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")

define(UBIFS_ARGS, "-m 2048 -e 126976 -c 3186")
define(UBI_ARGS, "-m 2048 -p 128KiB")

uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_PART_OFFSET}
    block-count = ${UBOOT_ENV_PART_COUNT}
}

file-resource uboot {
  host-path = "u-boot"
}
file-resource uImage {
  host-path = "uImage"
}
file-resource uImage-dtb {
  host-path = "uImage-dtb"
}
file-resource ubi.ini {
	host-path = "ubi.ini"
}
file-resource rootfs.img {
  host-path = "${ROOTFS}"
}

task complete {
  on-init {
    execute("mkdir _tmp")
    execute("mkdir _tmp/ubifs")
  }
  #########################
  # Create the NOR Image  #
  #########################
  on-resource uboot {
      raw_write(${UBOOT_A_PART_OFFSET})
  }
  on-resource uImage {
      raw_write(${KERNEL_A_PART_OFFSET})
  }
  on-resource uImage-dtb {
      raw_write(${DTB_A_PART_OFFSET})
  }
  #########################
  # Create the NAND Image #
  #########################
  on-resource ubi.ini {
    path_write("_tmp/ubi.ini")
  }
  on-resource rootfs.img {
    path_write("_tmp/combined.squashfs")
  }
	on-finish {
    # Create an the UBIFS for Data
    execute("mkfs.ubifs -F -r _tmp/ubifs ${UBIFS_ARGS} -o _tmp/ubifs.img")

    # Create the full UBI Image
    execute("ubinize -v ${UBI_ARGS} -o ubi.img _tmp/ubi.ini")

    # Cleanup
    execute("rm -Rf _tmp")
    }
}

task upgrade.a {
  require-uboot-variable(uboot-env, "active_partition", 1)

  # Update NOR
  on-resource uImage {
      raw_write(${KERNEL_A_PART_OFFSET})
  }
  on-resource uImage-dtb {
      raw_write(${DTB_A_PART_OFFSET})
  }
  # Update NAND
  on-resource rootfs.img {
    pipe_write("ubiupdatevol /dev/ubi0_0 -s ${FWUP_SIZE_rootfs_img} -")
  }

  on-finish {
    uboot_setenv(uboot-env, "active_partition", 0)
  }
}

task upgrade.b {
  require-uboot-variable(uboot-env, "active_partition", 0)

  # Update NOR
  on-resource uImage {
      raw_write(${KERNEL_B_PART_OFFSET})
  }
  on-resource uImage-dtb {
      raw_write(${DTB_B_PART_OFFSET})
  }
  # Update NAND
  on-resource rootfs.img {
    pipe_write("ubiupdatevol /dev/ubi0_1 -s ${FWUP_SIZE_rootfs_img} -")
  }

  on-finish {
    uboot_setenv(uboot-env, "active_partition", 1)
  }
}
