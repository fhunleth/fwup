#
# Example UBI setup
# 
# Note this layout mimics the layout of CHIP www.getchip.com.  Be sure you understand the 
# risks associated with keeping U-Boot in RAW NAND Flash partition.  Often a NOR flash is 
# preferable for U-BOOT
#

#
# NAND Flash Device
# +----------------------------+
# | /dev/mtd0: spl             |
# +----------------------------+
# | /dev/mtd1: spl backup      |
# +----------------------------+
# | /dev/mtd2: uboot           |
# +----------------------------+
# | /dev/mtd3: uboot env       |
# +----------------------------+
# | /dev/mtd4: UBI             |
# +----------------------------+

# UBI Partitions ()
# +----------------------------+
# | /dev/ubi0_0: kernel a      |
# +----------------------------+
# | /dev/ubi0_1: dtb a         |
# +----------------------------+
# | /dev/ubi0_2: kernel b      |
# +----------------------------+
# | /dev/ubi0_3: dtb b         |
# +----------------------------+
# | /dev/ubi0_4: rootfs a      |
# +----------------------------+
# | /dev/ubi0_5: rootfs b      |
# +----------------------------+
# | /dev/ubi0_6: data          |
# +----------------------------+

# (Sizes are in 512 byte blocks)
define(SPL_A_OFFSET, 0)
define(SPL_A_PART_COUNT, 8192)
define-eval(SPL_B_OFFSET, "${SPL_A_PART_OFFSET} + ${SPL_A_PART_OFFSET}")
define(SPL_B_COUNT, 8192)
define-eval(UBOOT_PART_OFFSET, "${SPL_B_PART_OFFSET} + ${SPL_B_PART_OFFSET}")
define(UBOOT_PART_COUNT, 8192)
define-eval(UBOOT_ENV_PART_OFFSET, "${UBOOT_PART_OFFSET} + ${UBOOT_PART_OFFSET}")
define(UBOOT_ENV_PART_COUNT, 8192)

define-eval(UBI_PART_OFFSET, "${UBOOT_ENV_PART_OFFSET} + ${UBOOT_ENV_PART_COUNT}")
define(UBI_PART_COUNT, 8355840)

define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")

define(UBIFS_ARGS, "-m 2048 -e 126976 -c 3186")
define(UBI_ARGS, "-m 2048 -p 128KiB")

# This is relative to /dev/mtdblock3
uboot-environment uboot-env {
    block-offset = 0
    block-count = ${UBOOT_ENV_PART_COUNT}
}

file-resource uboot {
  host-path = "u-boot"
}
file-resource zImage {
  host-path = "zImage"
}
file-resource zImage-dtb {
  host-path = "zImage-machine.dtb"
}
file-resource ubi.ini {
	host-path = "ubi.ini"
}
file-resource rootfs.img {
  host-path = "${ROOTFS}"
}

task complete {
  on-init {
    execute("mkdir _tmp")
    execute("mkdir _tmp/ubifs")
  }
  on-resource uboot {
    raw_write(${UBOOT_A_PART_OFFSET})
  }
  on-resource ubi.ini {
    path_write("_tmp/ubi.ini")
  }
  on-resource rootfs.img {
    path_write("_tmp/combined.squashfs")
  }
  on-resource zImage {
    path_write("_tmp/zImage")
  }
  on-resource zImage-dtb {
    path_write("_tmp/zImage-machine.dtb")
  }

	on-finish {
    # Create an the UBIFS for Data
    execute("mkfs.ubifs -F -r _tmp/ubifs ${UBIFS_ARGS} -o _tmp/ubifs.img")

    # Create the full UBI Image
    execute("ubinize -v ${UBI_ARGS} -o ubi.img _tmp/ubi.ini")

    # Cleanup
    execute("rm -Rf _tmp")
    }
}

#
# Note:  To upgrade, you must pass the mtdblock device of u-boot
#
#   fwup -a -d /dev/mtdblock3 -i myfirmware.fw -t upgrade
#
# This is because there is no "full" mtd device.  Each partition
# must be accessed individually

task upgrade.a {
  require-uboot-variable(uboot-env, "active_partition", 1)

  on-resource zImage {
    pipe_write("ubiupdatevol /dev/ubi0_0 -s ${FWUP_SIZE_zImage} -")
  }
  on-resource zImage-dtb {
    pipe_write("ubiupdatevol /dev/ubi0_1 -s ${FWUP_SIZE_zImage_dtb} -")
  }

  on-resource rootfs.img {
    pipe_write("ubiupdatevol /dev/ubi0_4 -s ${FWUP_SIZE_rootfs_img} -")
  }

  on-finish {
    uboot_setenv(uboot-env, "active_partition", 0)
  }
}

task upgrade.b {
  require-uboot-variable(uboot-env, "active_partition", 0)

  on-resource zImage {
    pipe_write("ubiupdatevol /dev/ubi0_2 -s ${FWUP_SIZE_zImage} -")
  }
  on-resource zImage-dtb {
    pipe_write("ubiupdatevol /dev/ubi0_3 -s ${FWUP_SIZE_zImage_dtb} -")
  }

  on-resource rootfs.img {
    pipe_write("ubiupdatevol /dev/ubi0_5 -s ${FWUP_SIZE_rootfs_img} -")
  }

  on-finish {
    uboot_setenv(uboot-env, "active_partition", 1)
  }
}
